
clear;
clc;
close all;

%% PROFILE ON
profile clear;
%profile -memory on
profile on;

%% PARAMETERS

%size of squared patches to train and use the ferns
patchsize=31;
%number of ferns that will be generated by training.
fern_number = 20;
%depth of ferns, where the number of histograms being 2^depth might be
%space critical
fern_depth = 10;
%number of random drawings for determining stable harris points
stable_rand = 10;
%minimum number of occurences of backwarped points in stable_harris needed for
%classification as "stable"
stable_thres = 10;
%number of random warps performed on every patch in training procedure
train_iter = 5000;
%parameters for ransac
%s number of randomly drawn points
ransac_s = 1;
%t distance Threshold
ransac_t = 50;
%T threshold for inliers in random set to terminate ransac
ransac_T = 4;
%N max number of iterations
ransac_N = 500;

%% SOURCE DATA
image = double(rgb2gray(imread('imagesequence/img1.ppm')));
im=image;
%% TRAINING

%calculate stable points
disp('START calculating stable harris points');%DEBUG
stable_points = stable_harris(im, stable_rand, stable_thres);
disp('stable harris points COMPLETE');%DEBUG
disp(size(stable_points,1));

%init ferns, set number of stable points as potential classes
F = ferns_simple(fern_number, fern_depth, size(stable_points,1));

%train the ferns using patches on stable points 
disp('START training of ferns'); %DEBUG
F.train_many(im, stable_points, patchsize, train_iter);
disp('training of ferns COMPLETE'); %DEBUG

%% SAVE trained fern
fernfile = 'fern.mat';
F.saveFile(fernfile);

%% LOAD trained fern
fernfile = 'fern.mat'
F = fern_simple.loadFile(fernfile);

%% NORMALIZE !!!
F.normalize();

%% RECOGNITION
source_im = image;
figure;
imagesc(source_im), colormap gray;

half = floor(patchsize/2);
%DEBUG
%im = image;
for i = 1:5
    im = double(rgb2gray(imread(['imagesequence/img',num2str(i+1),'.ppm'])));
    %points = stable_harris(im, stable_rand, stable_thres);
    points = corner(im,intmax);
    points = points(:,[2,1]);
    %disp(size(points))
    im = imfilter(im,fspecial('gaussian',5,0.5));
    im = padarray(im,[half, half], -1);
    N = imnoise(zeros(size(im)),'gaussian')*2*255;
    im(im(:)==-1) = N(im(:)==-1);
    
    map_source = zeros(size(points,1),2);
    map_target = zeros(size(points,1),2);
    
    counter = 1;
    for s = 1:size(points,1)
       p = points(s,:);
       patch = im(p(1)-half+half:p(1)+half+half,p(2)-half+half:p(2)+half+half);
       %imagesc(patch),colormap gray;
       %drawnow();
       source_p = F.recognize(patch);
       if source_p(1) > 0 && source_p(2) > 0
           map_source(counter,:) = [source_p(1), source_p(2)];
           map_target(counter,:) = [p(1),p(2)];
           counter = counter+1;
       end
    end
    map_source = map_source(1:counter-1,:);
    map_target = map_target(1:counter-1,:);
    
    [dts_max, source_max, target_max, ransac_H] = ransac(map_source,map_target,ransac_s,ransac_t,ransac_T,ransac_N);
    
    figure;
    imagesc(im), colormap gray, axis equal tight;
    hold on;
    rect = [[1 1 0];[size(source_im,1) 1 0];[size(source_im,1) size(source_im,2) 0];[1 size(source_im,2) 0]]*ransac_H';
    plot([rect(:,1);rect(1,1)],[rect(:,2);rect(1,2)],'Xr');
    %disp(rect);
end

%% PROFILE OFF
profile viewer;
profile off;